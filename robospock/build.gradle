repositories {
    flatDir {
        dirs 'libs'
    }
}

apply {
    plugin 'groovy'
    plugin 'signing'
    plugin 'maven'
}

def artifactId = 'robospock'
group = 'org.robospock'
description = 'RoboSpock testing library'

sourceCompatibility = 1.6



dependencies {
    compile "org.codehaus.groovy:groovy-all:2.3.8"
    compile "org.spockframework:spock-core:1.0-groovy-2.3"

    // Android part
    compile "org.robolectric:robolectric:3.0"
    compile "com.google.android:android:4.1.1.4"
    compile "com.android.support:support-v4:19.0.1"
}


/*
 *
 * It's all about OSS Sonatype from now to the bottom
 *
 */

// Set up for Sonatype OSS repository
def isReleaseVersion = !version.endsWith('SNAPSHOT')

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar the artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask(':uploadArchives') }

    sign configurations.archives
}

def uploadUsername = project.hasProperty('sonatypeUsername') ? project['sonatypeUsername'] : ''
def uploadPassword = project.hasProperty('sonatypePassword') ? project['sonatypePassword'] : ''

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment { MavenDeployment deployment ->
            if (isReleaseVersion) {
                signing.signPom(deployment)
            }
        }

        snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
            authentication(userName: uploadUsername, password: uploadPassword)
        }

        pom.artifactId = artifactId

        pom.project {
            name 'robospock'
            packaging 'jar'
            description 'Library brings Robolectric unit tests option to Spock testing framework.'
            url 'https://github.com/Polidea/Robospock'

            scm {
                url 'scm:git@github.com:Polidea/RoboSpock.git'
                connection 'scm:git@github.com:Polidea/RoboSpock.git'
                developerConnection 'scm:git@github.com:Polidea/RoboSpock.git'
            }

            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'pjakubczyk'
                    name 'Przemek Jakubczyk'
                }
                developer {
                    id 'wojtek.erbetowski'
                    name 'Wojtek Erbetowski'
                }
            }
        }
    }
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        //, "standardOut", "standardError"

        lifecycle {
            exceptionFormat "full"
        }
    }
}

